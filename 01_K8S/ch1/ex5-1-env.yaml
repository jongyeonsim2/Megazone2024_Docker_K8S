# ex5-1-env.yaml

# 환경 변수
# 1. 컨테이너 내부에 직//접 설정
# 2. configMap
# 3. secret

# 환경 변수는 컨테이너 단위로 정의가 되기 때문에
# 공통으로 사용될 환경변수도 중복해서 컨테이너에 정의될 수 있음.

# 비밀번호, API key 등은 공개가 되면 안되기 때문에
# 이러한 부분들을 해결하기 위한 ConfigMqp, Secret 객체가 있음.

# ConfigMqp, Secret 는 K8S 에서 설정값을 저장하는 객체임.

# ConfigMqp 은 외부에 공개되어도 문제가 되지 않는 값을 저장.
# Secret 는 외부에 공개가 되면 안되는 값들을 저장.

# ConfigMap : Database Host Name
# ConfigMap : Database User
# Secret : Database Password

# 컨테이너 입장에서의 K8S 환경변수의 장점.
# K8S 입장에서의 환경변수는 컨테이너 내부에 어떠한 값을 전달할 때
# 값을 전달하기 가장 쉬운 방법중에 하나임.

# 빌드가 완료된 이미지라고 하더라도 컨테이너로 실행되는 타이밍에
# 필요한 정보를 더 주입할 수 있음.

# 환경 변수가 pod 레벨에 정의되어 모든 컨테이너에게 전파되어지는
# 형태가 아니라 컨테이너 독립적인 속성으로 정의가 되어 사용되어 짐.

apiVersion: v1
kind: Pod
metadata:
  name: env-test-pod
spec:
  containers:
    - name: my-container
      image: nginx
      # 컨테이너 전용 환경변수 설정
      env:
        # 환경변수 1 설정
        - name: SAMPLE_ENV # 환경 변수명
          value: "Sample Variable"
        # 환경변수 2 설정
        # POD_NAME 환경 변수는 pod 의 이름(env-test-pod)을 컨테이너 내부에 설정
        - name: POD_NAME
          # 참조해서 사용할 수 있도록, value 대신에 valueFrom 으로 정의함.
          valueFrom:
            fieldRef:
              # metadata.name 처럼 참조를 위한 field 를 지정하는 것을
              # K8S 에서는 downward api 라고 함.
              fieldPath: metadata.name
# kubectl apply -f ex5-1-env.yaml

# kubectl get pod

# kubectl exec env-test-pod -- printenv
# kubectl exec : pod 내부에 있는 컨테이너에 임의의 명령어를
#               실행하는 형태로 사용할 수 있음.
# printenv : 컨테이너 내부에 설정된 환경변수 목록을 출력하는 명령어
