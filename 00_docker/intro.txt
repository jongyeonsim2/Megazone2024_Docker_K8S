0. 흐름

   java 웹 app 개발 
   -> image 로 빌드 ( docker 에서 사용할 수 있는 image => container 용도 ) 
   -> 실행
      - docker 를 이용해서 실행
      - k8s 에서 사용할 수 있도록 image 를 배포
        docker hub( public image registry, image 저장소 )
   -> docker, K8S, EKS 에서 pull 해서 사용할 수 있음.

1. docker 설치
   - WSL2(Windows Subsystem For Linux) 활성화
     docker 는 Linux 에서만 호환이 됨.
     윈도우에서 linux 처럼 사용하기 위함.

     제어판 > 프로그램 및 기능 > Windows 기능 켜기/끄기

     Linux 용 Windows 하위 시스템, 가상 머신 플랫폼 를 체크
     윈도우 재부팅

   - docker 설치
     Docker Desktop 다운 및 설치

     https://docs.docker.com/desktop/install/windows-install/

     docker hub 가입
     
     Docker Desktop 설치

     docker version 입력 후 실행.
     => docker client, server 를 확인.
     
     docker run hello-world

   - 리눅스 커널 업데이트
     wsl_update_x64.msi

   - 설치 및 실행 확인
     docker version 입력 후 실행.

2. 컨테이너 기술의 장점
   - 하이퍼바이저와 Guest OS 가 없기 때문에 가볍다.
   - 경량이기 때문에 만들어진 이미지 복제, 이관, 배포가 쉽다.
   - Guest OS를 부팅하지 않기 때문에 애플리케이션 시작 시간이 빠르다.
   - 가상머신(Virtual Box, Vmware 등)보다 경량이므로 더 많은 
     애플리케이션을 실행할 수 있음.

3. Docker clinet, server, registry
   - client 는 도커 명령을 받고, 결과를 출력하는 역할을 함.
     도커에 명령을 내릴 수 있는 CLI(command line interface) 도구를 의미함.
     도커 클라이언트를 이용해서 컨테이너, 이미지 등을 관리를 요청할 수 있음.
   - server 는 도커 엔진, 즉 도커 데몬을 이용해 컨테이너 시작, 운영, 정지 등을 담당.
   - 도커 registry 는 도커 이미지를 저장하거나 배포하는 시스템.
     docker hub는 가장 유명한 public 레지스트리임.

4. Docker image, container
   - 도커 image 란 컨테이너 형태로 소프트웨어를 배포하기 위해 필요한 모든 요소
     (코드, 라이브러리, 설정 등)를 실행할 수 있는 포맷으로 컴파일 및 빌드한 패키지임.
   - 도커 container 는 docker image 를 실행 할 수 있는 인스턴스를 의미함.
     도커 container 는 도커 image 로 부터 생성되며, 도커 container 에 대해 실행, 중지,
     삭제 등의 명을을 내릴 수 있ㅇ름.

     컨테이너는 도커 엔진과 운영체제를 공유함. 즉, 컨테이너는 도커 엔진이 설치되어 있는
     호스트 운영체제를 이용한다는 뜻임.

5. K8S, K8S 의 장점.
   - ERP( 생산 : 컨테이너 하나, 물류 : 컨테이너 하나, 회계 : 컨테이너 하나, 인사 :컨테이너 하나 등 )

   - ERP의 실행 할 수 있는 단위가 무한정으로 늘어날 수 있음. 
     그래서, 하나의 모듈당 20개의 실행단위인 컨테이너로 운영을 한다면, 총 80개의 컨테이너를
     운용하게 됨. 향후에는 회사가 성장함에 따라 컨테이너 수가 더욱 늘어날 수 있음.

   - 수많은 컨테이너의 관리를 편리하게 하기 위해 오케스트레이션 도구가 필요해짐.
     그래서, 표준이 된 것이 k8s 임.

   - 쿠버네티스는 대규모 클러스터 환경의 수 많은 컨테이너를 쉽고 빠르게 확장, 배포, 
     관리하는 작업을 자동화해주는 플랫폼.

   - AWS EKS, Azure AKS, Google GKE

   - K8S 의 장점
     a. 온프레미스 환경에서 수행하는 서버 업그레이드, 패치, 백업 등의 작업을 
     자동화(오토 스케일링, 로드 밸런싱 등)하여 인프라 관리보다는 서비스 관리에 
     집중할 수 있음.

     b. 컨테이너 장애 발생시 자기 회복 기능을 통해 복제 컨테이너를 생성하여
     서비스를 지속할 수 있음. => 무중단 서비스, 무중단 배포(업그레이드)
     => 레플리카셋 => 24/7/365 서비스
    
     c. 컨테이너화를 통해 소프트웨어를 패키지화하면 점진적 업데이트를 통해
     다운타임없이 쉽고 빠르게 릴리즈 및 업데이트할 수 있다.
     => 무중단 배포(업그레이드) => k8s의 레플리카셋이용.

6. docker container 서비스
   docker pull busybox // docker hub 이미지 가져오기
   docker images       // 로컬의 이미지 목록 조회
   docker run busybox  // 이미지를 컨테이너로 실행
   docker ps           // ps(process status). 실행중인것만 표시
   docker ps -a        // 실행중, 실행종료 모두 표시
   docker run -it busybox sh
      run : 이미지를 컨테이너로 실행
      -it : i => stdin open
            t => terminal 할당
            it => 명령어 입력을 터미널로 요청( 입력한 명령어를 실행 )
      busybox : 이미지
      sh : sh(셸) 를 이용

      busybox 라는 이미지를 컨테이로 실행해서 sh 를 이용해서 명령어를 실행.

   exit
   docker run busybox echo 'Hello World'
      a. docker client 에서 명령어 입력, 실행 요청
      b. docker server 명령어를 받음.
         dockerd(daemon) 이 명령어를 받음.
         Unix socket 을 통해서 컨테이너에게 명령어를 전달.
           - 도커 데몬과 통신하는데 사용.
           - Docker cli 에서 docker 명령어를 실행하는데 사용
         컨테이너에서 echo 'Hello World' 실행
      c. 실행된 결과가 docker client 로 전달.

   docker rmi 이미지ID
   docker rmi -f 이미지ID

   docker network create msa-network
      실행해야 할 이미지가 10개 가 있는 경우, 하나의 네트워크에 담아서 사용하고 싶음.
   docker network ls
   docker network inspect msa-network
      할당된 네트워크 정보 확인

   docker run --network msa-network -d -p 1521:1521 -p 8081:81 -e H2_OPTIONS="-ifNotExists" --name=h2 oscarfonts/h2
      --network msa-network  실행할 컨테이너에 네트워크를 할당.
      -d  데몬으로 실행
      -p 1521:1521 할당된 네트워크 의 port no
      -p 8081:81   host os 에서 h2에 접속할 때 사용할 port no
      -e 컨테이너를 생성할 때 전달할 환경변수.
         환경변수가 여러개라면 -e 옵션을 여러번 사용
      H2_OPTIONS="-ifNotExists"  h2 데이터베이스 생성을 위한 옵션

    docker images  h2 image 가 pull 되었는지 확인

    docker exec -it h2 /bin/bash

    cd /opt/h2/bin
    ls -al
    java -cp h2-2.1.214.jar org.h2.tools.Shell

    아래의 두 ddl 을 브라우저에서 실행 후, 접속한 컨테이너 터미널에서  조회.
    CREATE TABLE TEST(ID INT PRIMARY KEY, NAME VARCHAR(255));
    CREATE TABLE TEST100(ID INT PRIMARY KEY, NAME VARCHAR(255));

    터미널에서 show tables 로 실행해서
    브라우저에서 생성한 테이블이 조회가 되는 지 확인.

7. 6 번에서 수행한 작업을 깨끗하게 clear 하려고 하는 경우.
   - docker network 생성
   - h2 image pull
   - h2 image container

   - 삭제 순서
     container -> network -> image

     docker images 로 삭제할 이미지 의 IMAGE ID 조회
     docker rmi -f IMAGE ID => 강제 삭제가 안되는 경우. 컨테이너부터 종료시켜야 함.

     docker stop CONTAINER_ID => container 종료 성공

     docker rmi -f IMAGE ID => 이미지 삭제 성공

     docker images

     docker network rm msa-network

     docker network ls





